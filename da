[1mdiff --git a/git_usr_act/go.mod b/git_usr_act/go.mod[m
[1mdeleted file mode 100644[m
[1mindex 719d7d2..0000000[m
[1m--- a/git_usr_act/go.mod[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-module main.go[m
[31m-[m
[31m-go 1.23.6[m
[1mdiff --git a/weather-api.zip b/weather-api.zip[m
[1mdeleted file mode 100644[m
[1mindex 09f1293..0000000[m
Binary files a/weather-api.zip and /dev/null differ
[1mdiff --git a/weather-api/cacher/cache.go b/weather-api/cacher/cache.go[m
[1mdeleted file mode 100644[m
[1mindex 0da706d..0000000[m
[1m--- a/weather-api/cacher/cache.go[m
[1m+++ /dev/null[m
[36m@@ -1,63 +0,0 @@[m
[31m-package cacher[m
[31m-[m
[31m-import ([m
[31m-	"fmt"[m
[31m-	"net/http"[m
[31m-	"sync"[m
[31m-	"time"[m
[31m-[m
[31m-	"github.com/patrickmn/go-cache"[m
[31m-	"golang.org/x/time/rate"[m
[31m-)[m
[31m-[m
[31m-var c *cache.Cache[m
[31m-var clients = make(map[string]*Client)[m
[31m-var mu sync.Mutex[m
[31m-[m
[31m-type Client struct {[m
[31m-	limiter *rate.Limiter[m
[31m-}[m
[31m-[m
[31m-func init() {[m
[31m-	c = cache.New(time.Minute*15, time.Minute*30)[m
[31m-}[m
[31m-func getclient(ip string) *rate.Limiter {[m
[31m-	mu.Lock()[m
[31m-	defer mu.Unlock()[m
[31m-	if client, exists := clients[ip]; exists {[m
[31m-		fmt.Println("Client Found")[m
[31m-		return client.limiter[m
[31m-	}[m
[31m-	limit := rate.NewLimiter(rate.Limit(50), 1)[m
[31m-	clients[ip] = &Client{limit}[m
[31m-	fmt.Println("Added client")[m
[31m-	return limit[m
[31m-}[m
[31m-func Addcache(a map[string]interface{}, s string) {[m
[31m-	c.Set(s, a, 15*time.Minute)[m
[31m-	fmt.Println("Added Cache")[m
[31m-}[m
[31m-func Limitmid(a http.Handler) http.Handler {[m
[31m-	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {[m
[31m-		ip := r.RemoteAddr[m
[31m-		lim := getclient(ip)[m
[31m-		if !lim.Allow() {[m
[31m-			http.Error(w, "Too many requests", http.StatusTooManyRequests)[m
[31m-			fmt.Println("error generated")[m
[31m-			return[m
[31m-		}[m
[31m-		a.ServeHTTP(w, r)[m
[31m-	})[m
[31m-}[m
[31m-func Readcache(s string) (any, bool) {[m
[31m-	var f bool[m
[31m-	var d any[m
[31m-	if d, f = c.Get(s); f {[m
[31m-		//fmt.Println(d)[m
[31m-		fmt.Println("Cache found")[m
[31m-		return d, true[m
[31m-	} else {[m
[31m-		return nil, false[m
[31m-	}[m
[31m-[m
[31m-}[m
[1mdiff --git a/weather-api/env.json b/weather-api/env.json[m
[1mdeleted file mode 100644[m
[1mindex 9d2f9db..0000000[m
[1m--- a/weather-api/env.json[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-{"key":"DJVW72QYEFBA84K8FGM9E88AU"}[m
\ No newline at end of file[m
[1mdiff --git a/weather-api/go.mod b/weather-api/go.mod[m
[1mdeleted file mode 100644[m
[1mindex 2170d1e..0000000[m
[1m--- a/weather-api/go.mod[m
[1m+++ /dev/null[m
[36m@@ -1,9 +0,0 @@[m
[31m-module main[m
[31m-[m
[31m-go 1.23.6[m
[31m-[m
[31m-require ([m
[31m-	github.com/gorilla/mux v1.8.1 // indirect[m
[31m-	github.com/patrickmn/go-cache v2.1.0+incompatible // indirect[m
[31m-	golang.org/x/time v0.11.0 // indirect[m
[31m-)[m
[1mdiff --git a/weather-api/go.sum b/weather-api/go.sum[m
[1mdeleted file mode 100644[m
[1mindex d8dc9b2..0000000[m
[1m--- a/weather-api/go.sum[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=[m
[31m-github.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=[m
[31m-github.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=[m
[31m-github.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=[m
[31m-golang.org/x/time v0.11.0 h1:/bpjEDfN9tkoN/ryeYHnv5hcMlc8ncjMcM4XBk5NWV0=[m
[31m-golang.org/x/time v0.11.0/go.mod h1:CDIdPxbZBQxdj6cxyCIdrNogrJKMJ7pr37NYpMcMDSg=[m
[1mdiff --git a/weather-api/main.go b/weather-api/main.go[m
[1mdeleted file mode 100644[m
[1mindex e2fb303..0000000[m
[1m--- a/weather-api/main.go[m
[1m+++ /dev/null[m
[36m@@ -1,62 +0,0 @@[m
[31m-package main[m
[31m-[m
[31m-import ([m
[31m-	"encoding/json"[m
[31m-	"fmt"[m
[31m-	"io"[m
[31m-	"log"[m
[31m-	"main/cacher"[m
[31m-	"net/http"[m
[31m-	"os"[m
[31m-[m
[31m-	"github.com/gorilla/mux"[m
[31m-)[m
[31m-[m
[31m-type Key struct {[m
[31m-	Key string `json:"key"`[m
[31m-}[m
[31m-[m
[31m-var ky string[m
[31m-[m
[31m-func init() {[m
[31m-	var a Key[m
[31m-	d, _ := os.ReadFile("env.json")[m
[31m-	json.Unmarshal(d, &a)[m
[31m-	os.Setenv("KEY", a.Key)[m
[31m-	ky = os.Getenv("KEY")[m
[31m-}[m
[31m-[m
[31m-func getweather(w http.ResponseWriter, req *http.Request) {[m
[31m-	a := mux.Vars(req)[m
[31m-	s := a["city"][m
[31m-	var tmp map[string]interface{}[m
[31m-	d, _ := cacher.Readcache(s)[m
[31m-	if d == nil {[m
[31m-		arg, _ := http.Get("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/" + s + "?unitGroup=us&key=" + ky + "&contentType=json")[m
[31m-		e, _ := io.ReadAll(arg.Body)[m
[31m-		defer arg.Body.Close()[m
[31m-		rd := arg.StatusCode[m
[31m-		if rd != 200 {[m
[31m-			json.NewEncoder(w).Encode("BAD API REQUEST")[m
[31m-			fmt.Println("fck this:-", rd)[m
[31m-			return[m
[31m-		}[m
[31m-[m
[31m-		fmt.Println("Start cache")[m
[31m-		json.Unmarshal(e, &tmp)[m
[31m-		cacher.Addcache(tmp, s)[m
[31m-		json.NewEncoder(w).Encode(string(e))[m
[31m-	} else {[m
[31m-		fmt.Println("Got cached")[m
[31m-		json.NewEncoder(w).Encode(d)[m
[31m-	}[m
[31m-[m
[31m-}[m
[31m-func main() {[m
[31m-[m
[31m-	router := mux.NewRouter()[m
[31m-	router.Use(cacher.Limitmid)[m
[31m-	router.HandleFunc("/weather/{city}", getweather).Methods("GET")[m
[31m-	log.Fatal(http.ListenAndServe(":5050", router))[m
[31m-[m
[31m-}[m
